datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int     @default(autoincrement()) @id
  email       String? @unique
  username    String  @unique
  password	  String
  avatar      String?
  isTwoFA	  Boolean @default(false)
  otpTwoFA	  String? @unique

  userStatus  String  // online | in-game | offline
  userStats	  Stats?
  Games		  Game[] @relation("Game")

  createdAt   DateTime @default(now())
  updatedAt	  DateTime @updatedAt

  Blocked	  Int[]		@default([])
  socketId	  String?

  Friends	  Friends[] @relation("userFriends")
  userFriends Friends[] @relation("friend")

  privateChannels String[]
  channels		  Channel[] @relation("Member")
  AdminOf		  Channel[] @relation("Admin")
  invitedTo		  Channel[] @relation("Invited")
  kickedFrom	  Channel[] @relation("Kicked")
  bannedFrom	  Channel[] @relation("Banned")
  mutedFrom		  Channel[] @relation("Muted")
  channelMutes    ChannelUserMute[]
  sentMsgs		  DM[]		@relation("sentMsgs")
  receivedMsgs	  DM[]		@relation("receivedMsgs")
  msgs			  Msg[]		@relation("UserMsgs")
  notifs		  Notifs[]	@relation("UserNotifs")
}

model ChannelUserMute {
  id         Int      @id @default(autoincrement())
  channelId  Int
  userId     Int
  muteExpiry DateTime

  channel    Channel @relation(fields: [channelId], references: [id])
  user       User    @relation(fields: [userId], references: [id])

  @@unique([channelId, userId])
}

model Msg {
	id			Int		 @id @default(autoincrement())
	createdAt	DateTime @default(now())
	updatedAt	DateTime @updatedAt

	text		String

	channel		Channel @relation(fields: [channelId], references: [id])
	channelId	Int

	user		User 	@relation("UserMsgs", fields: [fromId], references: [id])
	fromId		Int
}

model Notifs {
	id			Int @id @default(autoincrement())
	type		String // friend-request, game...
	from		String
	to			String
	status		String // accepted, rejected... etc
	msg			String
	
	createdAt	DateTime @default(now())
	updatedAt	DateTime @updatedAt

	user		User @relation("UserNotifs", fields: [userId], references: [id])
	userId		Int
	avatar		String	@default("http://localhost:3000/images/jesus.webp")
	friendId	Int
}

model DM {
	id			Int 	 @id @default(autoincrement())

	text		String

	createdAt	DateTime @default(now())

	from		User 	 @relation("sentMsgs", fields: [fromId], references: [id])
	fromId		Int

	to			User	 @relation("receivedMsgs", fields: [toId], references: [id])
	toId		Int

	channelId	String
}

model Channel {
	id			Int		@id @default(autoincrement())
	name		String
	createdAt	DateTime @default(now())
	updatedAt	DateTime @updatedAt

	type		String? // public, private, with key
	password	String?
	ownerId		Int
	adminsIds	Int[]

	member		User[]	@relation("Member")
	admins		User[]	@relation("Admin")
	invited		User[]	@relation("Invited")
	kicked		User[]	@relation("Kicked")
	banned		User[]	@relation("Banned")
	muted		User[]  @relation("Muted")
	userMutes   ChannelUserMute[]
	msgs		Msg[]
}

model Stats {
	id		Int @id @default(autoincrement())
	
	achievements Achievements[]

	wins	Int @default(0)
	losses	Int @default(0)
	rank 	String @default("Unranked")	// Unranked, Bronze, Silver, Gold, Platinum, Diamond
	
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt

  	user   User @relation(fields: [userId], references: [id])
 	userId Int  @unique
}

model Achievements {
	id		Int @id @default(autoincrement())

	user	Stats @relation(fields: [userId], references: [id])
	userId	Int

	name	String
	desc	String
	icon	String

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Friends {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt	DateTime @updatedAt

  fromId	Int
  toId      Int

  friendID	Int
  status	String   @default("Pending") // Pending, Accepted, Declined, Blocked

  user		User @relation("userFriends", fields: [userId], references: [id])
  userId	Int

  friend	User @relation("friend", fields: [friendId], references: [id])
  friendId	Int
}

model Game {
  id        Int      @id @default(autoincrement())
  
  outcome   String?  @default("Undefined") // Win | Loss
  p1Score   Int      @default(0)
  p2Score   Int      @default(0)
  p2Id      Int
  
  gameType  String?  @default("Undefined")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user   User @relation("Game", fields: [userId], references: [id])
  userId	Int
}